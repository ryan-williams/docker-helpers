
# Spawn a shell (/bin/bash) in the most recently-build Docker image (or an image passed as an argument)
defn dosh docker run -it --entrypoint /bin/bash
dshl() {
  image="$(docker images | head -n 2 | tail -n 1 | awk '{ print $3 }')"
  echo "Using latest image: $image"
  dosh "$@" "$image"
}
export -f dshl

docker_container_shell() {
  if [ $# -eq 0 ]; then
    container="$(docker ps '--format={{.ID}}' | head -n 1)"
    if [ -z "$container" ]; then
      container="$(docker container ls -l '--format={{.ID}}')"
      echo "No running containers; committing most recent container: $container"
      docker commit "$container"
      dshl
      return $?
    else
      echo "Using first running container: $container"
      docker exec -it "$container" /bin/bash
    fi
  else
    container="$1"
    shift
    if ! docker ps '--format={{.ID}} {{.Names}}' | grep -q "$container"; then
      echo "Container doesn't appear to be running; committing then runningâ€¦"
      docker commit "$container"
      dshl "$@"
      return $?
    else
      docker exec -it "$container" /bin/bash
    fi
  fi
}
export -f docker_container_shell
defn dshc docker_container_shell
defn dcsh docker_container_shell

defn dbd docker-build.py
defn dbf docker-build.py
defn dbu docker-build.py
defn dcp docker cp
docker_stop() {
  local all=
  if [ "$1" == "-a" ]; then
    all=1
    shift
    if [ $# -gt 0 ]; then
      echo "Usage: $0 [-a | id...]" >&2
      exit 1
    fi
  fi
  if [ $# -gt 0 ]; then
    for arg in "$@"; do
      docker stop "$arg"
    done
  else
    if [ -n "$all" ]; then
      IFS=$'\n' read -d '' -r -a ids < <(docker ps --format={{.ID}})
      if [ ${#ids[@]} -eq 0 ]; then
        echo "No running containers found"
      else
        echo "Stopping ${#ids[@]} containers: ${ids[@]}"
        for id in ${ids[@]}; do
          echo "Stopping: ${id}"
          docker stop "$id"
        done
      fi
    else
      latest="$(docker ps --format={{.ID}} | head -n 1)"
      if [ -n "$latest" ]; then
        echo "Stopping $latest"
        docker stop "$latest"
      else
        echo "No running containers found"
      fi
    fi
  fi
}
export -f docker_stop
defn dst docker_stop
defn dsp docker_stop
defn dsta docker_stop -a
defn dspa docker_stop -a

defn mdi make-dockerignore.py

defn dh docker help
defn dps docker ps
defn dpsi docker ps '--format={{.ID}}'
defn dpsin docker ps '--format={{.ID}} {{.Names}}'
defn dpsa docker ps -a
defn dpsai docker ps -a '--format={{.ID}}'
defn dpsain docker ps -a '--format={{.ID}} {{.Names}}'
defn dpsas docker ps -as
defn dmg docker images
defn dmgs docker images
defn dols docker images
defn dli docker images
dlsh() {
  dols | head "$@"
}
export -f dlsh
defn dlh dlsh
defn dlih dlsh

defn dcl docker container ls
defn dcls docker container ls
defn dca docker container ls -a
defn dcla docker container ls -a
dclh() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    n="$1"; shift
  else
    n=10
  fi
  docker container ls "$@" | head -n "$n"
}
export -f dclh

dcah() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    n="$1"; shift
  else
    n=10
  fi
  docker container ls -a "$@" | head -n "$n"
}
export -f dcah

defn drm docker rm
defn drmi docker rmi

defn dk docker
defn dkc docker container
defn dkcr docker container rm
defn dki docker image
defn dkir docker image rm

aws_ecr_docker_login() {
  eval `aws ecr get-login --no-include-email`
}
export -f aws_ecr_docker_login
defn aedl aws_ecr_docker_login
defn adl aws_ecr_docker_login

defn din docker inspect
defn dis docker inspect
defn dif docker inspect
defn dns docker inspect

defn drm docker rm
defn drmi docker rmi

defn dcan docker ps -a --filter ancestor=$img -q
defn ddsc python docker_descendents.py

dce() {
  docker container inspect "$@" &>/dev/null
}
