
defn dk docker
defn dh docker help

docker_help() {
  docker "$@" --help
}
export -f docker_help
defn dkh docker_help

defn dks docker start
defn dkt docker tag
defn dkv docker volume
defn dka docker attach

defn dkx docker export
defn dkxo docker export -o

defn dcp docker cp

defn dkdf docker system df
defn dkif docker system info

defn dkpl docker pull

defn dkph docker push
defn dkps docker push

## docker run ##

defn dkr docker run --rm
defn dkrk docker run
docker_run_mount_cwd() {
    img="$1"; shift
    docker run -v $PWD:/src -w /src --entrypoint bash "$img" -c "$@"
}
export -f docker_run_mount_cwd
defn dkrvk docker_run_mount_cwd
docker_run_mount_cwd_rm() {
    img="$1"; shift
    docker run -v $PWD:/src -w /src --entrypoint bash "$img" -c "$@"
}
export -f docker_run_mount_cwd_rm
defn dkrv docker_run_mount_cwd_rm
defn dkrhw docker run -it --rm hello-world
defn dkri docker run -it
defn dkrr docker run -it --rm
defn dkrip docker run -it -p
defn dre docker run --rm --entrypoint
defn drek docker run --entrypoint
defn docker_pip docker run -it --rm --entrypoint pip
defn dri docker run --rm -it
defn drik docker run -it
defn drie docker run --rm -it --entrypoint
defn driek docker run -it --entrypoint
defn drike docker run -it --entrypoint
defn drev docker run -it --entrypoint /usr/bin/env
defn dind docker run -v /var/run/docker.sock:/var/run/docker.sock

docker_run_commit() {
    name="$1"; shift
    docker run --name "$name" "$@" && \
    docker commit "$name" "$name" && \
    docker container rm "$name"
}
export -f docker_run_commit
defn drk docker_run_commit

## docker shell helpers ##

# Spawn a shell (/bin/bash) in the most recently-build Docker image (or an image passed as an argument)
docker_shell() {
  docker run -it --entrypoint /usr/bin/env "$@" bash --login
}
export -f docker_shell
defn dosh docker_shell --rm
defn dshk docker_shell

dshl() {
  image="$(docker images | head -n 2 | tail -n 1 | awk '{ print $3 }')"
  echo "Using latest image: $image"
  dosh "$@" "$image"
}
export -f dshl

docker_container_shell() {
  if [ $# -eq 0 ]; then
    container="$(docker ps '--format={{.ID}}' | head -n 1)"
    if [ -z "$container" ]; then
      container="$(docker container ls -l '--format={{.ID}}')"
      echo "No running containers; committing most recent container: $container"
      docker commit "$container"
      dshl
      return $?
    else
      echo "Using first running container: $container"
      docker exec -it "$container" /usr/bin/env bash
    fi
  else
    container="$1"
    shift
    if ! docker ps '--format={{.ID}} {{.Names}}' | grep -q "$container"; then
      echo "Container doesn't appear to be running; committing then runningâ€¦"
      docker commit "$container"
      dshl "$@"
      return $?
    else
      echo "Shelling into running container"
      docker exec -it "$container" /usr/bin/env bash
    fi
  fi
}
export -f docker_container_shell
defn dshc docker_container_shell
defn dcsh docker_container_shell

## docker logs ##

docker_logs_last() {
  container="$(docker container ls -l --format={{.ID}})"
  echo "Showing logs for container $container"
  docker logs "$@" "$container"
}
export -f docker_logs_last
defn dkll docker_logs_last
defn dkllf docker_logs_last -f
defn dklf docker logs -f
defn dklg docker logs

## docker volume ##

defn dv docker volume
defn dkvc docker volume create
defn dvi docker volume inspect
defn dvl docker volume ls
defn dvp docker volume prune
defn dvpr docker volume prune
defn dvr docker volume rm

## docker commit ##

docker_commit_running() {
  container="$(docker ps '--format={{.ID}}' | head -n 1)"
  if [ -n "$container" ]; then
    echo "Committing first running container: $container"
    docker commit "$container" "$@"
  else
    container="$(docker container ls -l '--format={{.ID}}')"
    echo "No running containers; committing latest container '$container'"
    if [ $# -gt 0 -a "${1::1}" == "-" ]; then
      image="${@:(($#))}"
      args=("${@:1:$(($#-1))}")
      echo "image: $image"
      echo "${#args[@]} args: ${args[@]}"
      docker commit ${args[@]} "$container" "$image"
    else
      docker commit "$container" "$@"
    fi
  fi
}
export -f docker_commit_running
defn dkmr docker_commit_running
defn dkm docker commit
defn dkct docker commit

## docker stop ##

docker_stop() {
  local all=
  if [ "$1" == "-a" ]; then
    all=1
    shift
    if [ $# -gt 0 ]; then
      echo "Usage: $0 [-a | id...]" >&2
      exit 1
    fi
  fi
  if [ $# -gt 0 ]; then
    for arg in "$@"; do
      docker stop "$arg"
    done
  else
    if [ -n "$all" ]; then
      IFS=$'\n' read -d '' -r -a ids < <(docker ps --format={{.ID}})
      if [ ${#ids[@]} -eq 0 ]; then
        echo "No running containers found"
      else
        echo "Stopping ${#ids[@]} containers: ${ids[@]}"
        for id in ${ids[@]}; do
          echo "Stopping: ${id}"
          docker stop "$id"
        done
      fi
    else
      latest="$(docker ps --format={{.ID}} | head -n 1)"
      if [ -n "$latest" ]; then
        echo "Stopping $latest"
        docker stop "$latest"
      else
        echo "No running containers found"
      fi
    fi
  fi
}
export -f docker_stop
defn dkp docker_stop
defn dst docker_stop
defn dsp docker_stop
defn dsta docker_stop -a
defn dspa docker_stop -a

defn did image_digests.sh

## docker ps ##

defn dps docker ps
defn dpss docker ps --format 'table {{.Names}}\t{{.Image}}\t{{.Status}}'
defn dpsi docker ps '--format={{.ID}}'
defn dpsin docker ps '--format={{.ID}} {{.Names}}'
defn dpsa docker ps -a
defn dpsai docker ps -a '--format={{.ID}}'
defn dpsain docker ps -a '--format={{.ID}} {{.Names}}'
defn dpsas docker ps -as
defn dcan docker ps -a --filter ancestor=$img -q

## docker image ##

defn drm docker rm
defn drmi docker rmi

defn dki docker image
defn dkii docker image inspect
defn dkir docker image rm

defn dkl docker images
defn dmg docker images
defn dmgs docker images
defn dkls docker images
defn dols docker images
defn dli docker images
dlsh() {
  dols | head "$@"
}
export -f dlsh
defn dlh dlsh
defn dlih dlsh

## docker inspect ##

defn dkin docker inspect
defn dkip docker inspect
defn din docker inspect
defn dip docker inspect
defn dis docker inspect
defn dif docker inspect
defn dns docker inspect

## docker container ##

defn dkc docker container
defn dca docker container ls -a
defn dkci docker container inspect
dce() {
  docker container inspect "$@" &>/dev/null
}
export -f dce
defn dcl docker container ls
defn dkcll docker container ls -l
defn dcla docker container ls -a
defn dcls docker container ls
defn dclsa docker container ls -a
defn dkcl docker container ls
defn dkcm docker container rename
defn dcrm docker container rm
defn dkcr docker container rm
defn dkrm docker container rm
dclh() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    n="$1"; shift
  else
    n=10
  fi
  docker container ls "$@" | head -n "$n"
}
export -f dclh

docker_image_copy() {
    if [ $# -ne 3 ]; then
        echo "Usage: docker_image_copy <image> <src> <dst>" >&2
        return 1
    fi
    img="$1"; shift
    src="$1"; shift
    dst="$1"; shift
    id="$(docker create "$img")"
    docker cp "$id:$src" "$dst"
    docker container rm "$id"
}
export -f docker_image_copy
defn dic docker_image_copy
defn dicp docker_image_copy
defn dkic docker_image_copy

dcah() {
  if [[ "$1" =~ ^[0-9]+$ ]]; then
    n="$1"; shift
  else
    n=10
  fi
  docker container ls -a "$@" | head -n "$n"
}
export -f dcah

## misc scripts ##

aws_ecr_docker_login() {
  eval `aws ecr get-login --no-include-email`
}
export -f aws_ecr_docker_login
defn aedl aws_ecr_docker_login
defn adl aws_ecr_docker_login

defn ddsc python docker_descendents.py
defn mdi make-dockerignore.py

defn dbd docker-build.py
defn dbf docker-build.py
defn dbu docker-build.py
defn db. docker-build.py

defn dkpg docker_purge.py

defn dmip docker manifest inspect
defn dmi docker manifest inspect

docker_manifest_size() {
    local human_readable=
    if [ "$1" == "-h" ]; then
        human_readable=1
        args=("${@:2:$#}")
    else
        args=("$@")
    fi
    size="$(docker manifest inspect "${args[@]}" | jq '[ .config.size ] + (. .layers|map(.size)) | add')"
    if [ "$human_readable" ]; then
        numfmt --to=iec "$size"
    else
        echo "$size"
    fi
}
export -f docker_manifest_size
defn dmsz docker_manifest_size
defn dmsh docker_manifest_size -h

docker_size() {
  local human_readable=
  if [ "$1" == "-h" ]; then
    human_readable=1
    args=("${@:2:$#}")
  else
    args=("$@")
  fi
  for arg in "${args[@]}"; do
    size="$(docker inspect "$arg" | jq '.[0]|.Size')"
    if [ "$human_readable" ]; then
      numfmt --to=iec "$size"
    else
      echo "$size"
    fi
  done
}
defn dksz docker_size
defn dksh docker_size -h

defn dkpr docker system prune
defn dkpra docker system prune -a
defn dkpa docker system prune -a

docker_tags() {
    if [ $# -ne 1 ]; then
        echo "Usage: docker_tags <img>" >&2
        return 1
    fi
    img="$1"; shift
    docker inspect "$img" | jq -r '.[0].RepoTags[]'
}
export -f docker_tags
defn dkts docker_tags

docker_pull_shell() {
    if [ $# -ne 1 ]; then
        echo "Usage: docker_pull_shell <img>" >&2
        return 1
    fi
    img="$1"; shift
    docker pull "$img"
    docker_shell "$img"
}
export -f docker_pull_shell
defn dpsh docker_pull_shell
